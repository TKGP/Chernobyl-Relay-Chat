
--| Chernobyl Relay Chat
--| Interface for external application
--| By TKGP

local SCRIPT_VERSION = 1

-- Constants
local UPDATE_INTERVAL = 250
local INPATH = getFS():update_path("$game_config$", "").."\\crc_input.txt"
local OUTPATH = getFS():update_path("$game_config$", "").."\\crc_output.txt"
local QUERY_COLOR = "%c[255,255,192,192]"
local ERROR_COLOR = "%c[255,255,128,128]"
local HIGHLIGHT_COLOR = "%c[255,255,255,128]"

-- Options
local option = {
	newsDuration = 10000,
	chatKey = DIK_keys.DIK_RETURN,
	newsSound = true,
	closeChat = true,
	}

-- Etc
local config = system_ini()
local lastUpdate = 0
local sendQueue = {}
local messageLog = {}
local chatBox
local showChatBox = false
local users = {}
local knownIcons = {}

local function gt(id)
	local result = game.translate_string(id)
	if result == id then
		return nil
	else
		return result
	end
end
	
local function addMessage(icon, title, text)
	table.insert(messageLog, {title = title, text = text, icon = icon})
	db.actor:give_game_news(title, text, icon, 0, option.newsDuration)
	if option.newsSound then
		xr_sound.set_sound_play(db.actor:id(), "pda_tips")
	end
	if chatBox then
		chatBox:UpdateMessages()
	end
end

local inputActions = {
	Information = function (body)
		icon = crc_icons.info
		title = gt("crc_info")
		text = body
		addMessage(icon, title, text)
	end,
	Error = function (body)
		icon = crc_icons.error
		title = gt("crc_error")
		text = ERROR_COLOR..body
		addMessage(icon, title, text)
	end,
	Message = function (body)
		local faction, name, highlight, message = body:match("([^/]+)/([^/]+)/([^/]+)/(.+)")
		highlight = highlight == "True"
		icon = crc_icons.getIcon(name, faction)
		knownIcons[name] = icon
		if chatBox then
			chatBox:UpdateUsers()
		end
		title = name..", "..(name == "TKGP" and gt("crc_ccon")
			or gt("crc_"..faction) or gt("crc_unknown"))
		if highlight then
			text = HIGHLIGHT_COLOR..message
		else
			text = message
		end
		addMessage(icon, title, text)
	end,
	Query = function (body)
		local faction, from, to, message = body:match("([^/]+)/([^/]+)/([^/]+)/(.+)")
		icon = crc_icons.getIcon(from, faction)
		knownIcons[from] = icon
		if chatBox then
			chatBox:UpdateUsers()
		end
		title = from.." -> "..to
		text = QUERY_COLOR..message
		addMessage(icon, title, text)
	end,
	Setting = function (body)
		local setting, value = body:match("([^/]+)/(.+)")
		if setting == "NewsDuration" then
			option.newsDuration = tonumber(value)
		elseif setting == "ChatKey" then
			option.chatKey = DIK_keys[value]
		elseif setting == "NewsSound" then
			option.newsSound = value == "True"
		elseif setting == "CloseChat" then
			option.closeChat = value == "True"
		end
	end,
	Users = function (body)
		users = {}
		for user in body:gmatch("[^/]+") do
			table.insert(users, user)
		end
		if chatBox then
			chatBox:UpdateUsers()
		end
	end,
	}

local function send(message, ...)
	local line = message:format(...).."\n"
	table.insert(sendQueue, line)
end

local function update()
	if chatBox and not chatBox.focus then
		chatBox.editBox:CaptureFocus(true)
		chatBox.focus = true
	end
	
	if showChatBox then
		showChatBox = false
		chatBox = ChatBox()
		chatBox:ShowDialog()
	end
	
	if not db.actor or time_global() < lastUpdate + UPDATE_INTERVAL then return end
	lastUpdate = time_global()
	
	if #sendQueue > 0 then
		local output = io.open(OUTPATH, "a")
		if output then
			for _, line in ipairs(sendQueue) do
				output:write(line)
			end
			output:close()
			sendQueue = {}
		end
	end
	
	local input = io.open(INPATH, "r")
	if input then
		local receiveQueue = {}
		for line in input:lines() do
			table.insert(receiveQueue, line)
		end
		input:close()
		input = io.open(INPATH, "w")
		if input then
			input:close()
			for _, line in ipairs(receiveQueue) do
				local type, body = line:match("([^/]+)/(.+)")
				local action = inputActions[type]
				if action then
					action(body)
				else
					-- Whine about it
				end
			end
		end
	end
end

local function onDeath(whoID)
	local section, class
	local who = whoID and alife():object(whoID)
	if not who then
		section = "UNKNOWN"
		class = "UNKNOWN"
	else
		section = who:section_name()
		class = config:r_string(section, "class")
		if class == "AI_STL_S" then
			class = who:community()
		end
	end
	send("Death/%s/%s/%s/%s", db.actor:character_community(), level.name(), class:upper(), section)
end

local function onKeyPress(dik)
	if dik == option.chatKey and not chatBox then
		-- Defer to next update to avoid this keypress being sent to the UI as well
		showChatBox = true
	end
end

function on_game_start()
	AddUniqueCall(update)
	RegisterScriptCallback("actor_on_before_death", onDeath)
	-- Not using axr_keybind for old version compatibility
	RegisterScriptCallback("on_key_press", onKeyPress)
	send("Handshake/%s", SCRIPT_VERSION)
end

----------------------------------------------------------------------------------------------------

class "ChatBox" (CUIScriptWnd)
function ChatBox:__init() super()
	-- Disable keypress callback so other scripts don't fire while typing
	db.actor:set_callback(callback.key_press)
	
	self:SetWndRect(Frect():set(0, 0, 1024, 768))
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("crc_chatbox.xml")
	self.xml:InitStatic("background", self)
	
	self.editBox = self.xml:InitEditBox("edit_box", self)
	self:Register(self.xml:Init3tButton("button_send", self), "button_send")
	self:Register(self.xml:Init3tButton("button_close", self), "button_close")
	self:AddCallback("button_send", ui_events.BUTTON_CLICKED, self.Send, self)
	self:AddCallback("button_close", ui_events.BUTTON_CLICKED, self.Cancel, self)
	self.users = {}
	self:UpdateUsers()
	self.messages = {}
	self:UpdateMessages()
	self.focus = false
end

function ChatBox:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_RETURN or dik == DIK_keys.DIK_NUMPADENTER then
			self:Send()
		elseif dik == DIK_keys.DIK_ESCAPE then
			self:Cancel()
		end
	end
	return true
end

function ChatBox:UpdateUsers()
	for _, user in ipairs(self.users) do
		self:DetachChild(user)
	end
	self.users = {}
	for index, name in ipairs(users) do
		local user = self.xml:InitStatic("user", self)
		local newPos = vector2():set(0, user:GetWndPos().y + (index - 1) * user:GetHeight())
		user:SetWndPos(newPos)
		self.xml:InitStatic("user:icon", user):InitTexture(knownIcons[name] or crc_icons.unknown)
		self.xml:InitStatic("user:name", user):TextControl():SetText(name)
		table.insert(self.users, user)
	end
end

function ChatBox:UpdateMessages()
	for _, message in ipairs(self.messages) do
		self:DetachChild(message)
	end
	self.messages = {}
	for index, messageData in ipairs(messageLog) do
		local message = self.xml:InitStatic("message", self)
		local newPos = vector2():set(0, 768 - 100 - (#messageLog - index) * message:GetHeight())
		message:SetWndPos(newPos)
		self.xml:InitStatic("message:icon", message):InitTexture(messageData.icon)
		self.xml:InitStatic("message:title", message):TextControl():SetText(messageData.title)
		self.xml:InitStatic("message:message_text", message):TextControl():SetText(messageData.text)
		table.insert(self.messages, message)
	end
end

function ChatBox:Send()
	local input = self.editBox:GetText()
	if input and input ~= "" then
		self.editBox:SetText("")
		send("Message/%s/%s", db.actor:character_community(), input)
	end
	if option.closeChat then
		self:Cancel()
	else
		chatBox.editBox:CaptureFocus(true)
	end
end

function ChatBox:Cancel()
	chatBox:HideDialog()
	chatBox = nil
	-- Re-enable keypress callback when done
	db.actor:set_callback(callback.key_press, bind_stalker_ext.on_key_press, db.actor_binder)
end
